<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">

    <!--1、关联数据库配置文件,使用context:property-placeholder location导入-->
    <context:property-placeholder location="classpath:database.properties"/>

    <!--2、连接池
        dbcp:半自动化操作，不能自动连接
        c3p0:自动化操作（可以自动化的加载配置文件，并且可以自动设置到对象中）
        druid:
        hikari:
    -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- c3p0连接池的私有属性 -->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="false"/>
        <!-- 获取连接超时时间 -->
        <property name="checkoutTimeout" value="10000"/>
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!--3、sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>

        <!--绑定mybatis的配置文件-->
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
    <!--之前做法：在dao接口中写一个BookMapperImpl实现类，用两种方法可以获得sqlSession:
    方法一：该实现类继承SqlSessionDaoSupport,直接在方法中就可以使用getSession获得sqlSession;
    方法二： 私有化SqlSessionTemplate sqlSessionTemplate;-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory
        sqlSessionFactoryBeanName可以通过继承注入
        sqlSessionTemplateBeanName:私有化注入
        这里不管使用那种注入都可以-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包
        以后com.msj.dao下的类就不用写实现类和注入sqlSession了，spring已经帮我们自动注入了-->
        <property name="basePackage" value="com.msj.dao"/>
    </bean>
</beans>