<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       https://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--数据源：DataSource 使用spring的数据源替换mybatis的配置
    数据源：c3p0 dbcp druid等
    这里使用spring的jdbc:org.springframework.jdbc.datasource
    下面的配置完成后，就是由spring来接管数据源了
    -->
    <bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mybatis?serverTimezone=CST&amp;useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8"/>
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
    </bean>

    <!--配置：sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="datasource"/>

        <!--绑定mybatis配置文件：此时mybatis的核心配置文件中什么都可以不用留下（一般可以将别名和设置留在
        mybatis的核心配置文件中-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--绑定......Mapper.xml文件，也可以直接使用*.xml匹配所有的xml文件-->
        <property name="mapperLocations" value="com/msj/mapper/UserMapper.xml"/>
    </bean>

    <!--配置sqlSession-->
   <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <!-->这里只能使用构造器注入sqlSessionFactory,因为没有set方法-->
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!--配置声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg ref="datasource"/>
        <!--也可以通过属性注入-->
        <!--<property name="dataSource" ref="datasource"/>-->
    </bean>

    <!--结合AOP实现事务的织入
    1、配置事务的通知：tx：advice-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--2、给那些方法配置事务:add、delete、query、update方法等，这里
        表示以add、delete、query、update开头的方法
        *表示给所有方法：<tx:method name="*"/>
        3、配置事务的传播特性：new propagation(传播，默认为REQUIRED)
        -->
        <tx:attributes>
            <tx:method name="add" propagation="REQUIRED"/>
            <tx:method name="delete" propagation="REQUIRED"/>
            <tx:method name="update" propagation="REQUIRED"/>
            <!--read-only="true"表示以query开头的就不能对数据库进行增删改的操作-->
            <tx:method name="query" read-only="true"/>
            <!--表示所有的方法都支持事务，且以REQUIRED方式传播-->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--配置事务切入-->
    <aop:config>
        <aop:pointcut id="txPointCut" expression="execution(* com.msj.mapper.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>

</beans>