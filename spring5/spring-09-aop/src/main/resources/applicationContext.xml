<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--注册bean-->
    <bean id="userService" class="com.msj.service.UserServiceImpl"/>
    <bean id="log" class="com.msj.log.Log"/>
    <bean id="afterLog" class="com.msj.log.AfterLog"/>

    <!--方式一：使用原生的spring API接口-->
    <!--配置AOP:需要导入aop的约束-->
    <aop:config>
        <!--方式一-->
        <!--切入点:即需要在什么地方执行
        expression表达式：execution(要执行的位置：修饰词 返回值 类名 方法名 参数 如public void Log getName() xxx)
        其中可以用*表示匹配所有
        execution(* com.msj.service.UserServiceImpl.*(..))表示：
        不管修饰词和返回值，插入的位置是类com.msj.service.UserServiceImpl中的所有方法（.*代表所有方法）
        （..）代表不管参数的多少
        -->
        <!--<aop:pointcut id="pointcut" expression="execution(* com.msj.service.UserServiceImpl.*(..))"/>-->

        <!--执行环绕增加！即配置切入那个类
        advice-ref:要引用（即要切入的类）
        pointcut-ref：切入点引用，即刚才配置的切入点
        -->
        <!--<aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->
    </aop:config>

    <!--方式二:自定义类-->
    <bean id="diy" class="com.msj.diy.DiyPointCut"/>
    <!--aop配置-->
    <aop:config>
        <!--自定义切面（是一个类），切入切面:aspect
        ref:引用的类
        -->
        <!--<aop:aspect ref="diy">
            &lt;!&ndash;切入点&ndash;&gt;
            <aop:pointcut id="point" expression="execution(* com.msj.service.UserServiceImpl.*(..))"/>
            &lt;!&ndash;通知
            method:自定义切面（这里是DiyPointCut中的方法名，方法名后不需要加括号
            before表示在切入点之前切入，after表示在切入点之后切入
            &ndash;&gt;
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>
        </aop:aspect>-->
    </aop:config>


    <!--方式三-->
    <bean id="annotationPointCut" class="com.msj.diy.AnnotationPointCut"/>
    <!--开启注解支持
    自动代理的在spring中有两种实现方式：默认JDK  另一种是cglib
    <aop:aspectj-autoproxy proxy-target-class="false"/>即默认方式：JDK
    <aop:aspectj-autoproxy proxy-target-class="true"/>cglib方式
    两种方式执行的效果一样
    -->
    <aop:aspectj-autoproxy/>
</beans>